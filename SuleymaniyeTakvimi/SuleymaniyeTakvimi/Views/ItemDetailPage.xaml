<?xml version="1.0" encoding="utf-8" ?>
<ContentPage x:Class="SuleymaniyeTakvimi.Views.ItemDetailPage" xmlns="http://xamarin.com/schemas/2014/forms" xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml" xmlns:behaviors="http://xamarin.com/schemas/2020/toolkit" xmlns:pancakeView="clr-namespace:Xamarin.Forms.PancakeView;assembly=Xamarin.Forms.PancakeView" xmlns:viewModels="clr-namespace:SuleymaniyeTakvimi.ViewModels;assembly=SuleymaniyeTakvimi"
             Title="{Binding Title}"
             BackgroundColor="{AppThemeBinding Light={StaticResource AppBackgroundColor},
                                               Dark={StaticResource AppBackgroundColorDark}}"
             FlowDirection="{x:Static Device.FlowDirection}"
             Shell.PresentationMode="ModalAnimated" Visual="Material">
    <!--<ContentPage.BindingContext>
        <viewModels:ItemDetailViewModel/>
    </ContentPage.BindingContext>-->
    <ScrollView VerticalScrollBarVisibility="Never">
        <pancakeView:PancakeView Margin="{OnPlatform Android=9, iOS='9,10,9,9'}" Padding="18,14" HorizontalOptions="FillAndExpand" CornerRadius="5">
            <pancakeView:PancakeView.BackgroundGradientStops>
                <pancakeView:GradientStop Offset="0" Color="{AppThemeBinding Light=AliceBlue, Dark={StaticResource AppBackgroundColorDark}}" />
                <pancakeView:GradientStop Offset="1" Color="{AppThemeBinding Light=WhiteSmoke, Dark={StaticResource Primary}}" />
            </pancakeView:PancakeView.BackgroundGradientStops>
            <pancakeView:PancakeView.Shadow>
                <pancakeView:DropShadow BlurRadius="6" Opacity="0.3" Color="Coral" />
            </pancakeView:PancakeView.Shadow>
            <Grid x:DataType="viewModels:ItemDetailViewModel" ColumnDefinitions="*, Auto" RowDefinitions="Auto,Auto,Auto,Auto,Auto,Auto,Auto,Auto,Auto" Visual="Material">
                <pancakeView:PancakeView Grid.Row="0" Grid.ColumnSpan="2" Margin="14,4" CornerRadius="9">
                    <pancakeView:PancakeView.BackgroundGradientStops>
                        <pancakeView:GradientStop Offset="0" Color="{AppThemeBinding Light=Goldenrod, Dark={StaticResource PrimaryColor}}" />
                        <!--<pancakeView:GradientStop Color="PapayaWhip" Offset="0.75"/>-->
                        <pancakeView:GradientStop Offset="1" Color="{AppThemeBinding Light=Gold, Dark={StaticResource PrimaryAccent800Color}}" />
                    </pancakeView:PancakeView.BackgroundGradientStops>
                    <pancakeView:PancakeView.Shadow>
                        <pancakeView:DropShadow BlurRadius="3" Opacity="0.6" Offset="4,4" Color="SaddleBrown" />
                    </pancakeView:PancakeView.Shadow>
                    <StackLayout Padding="14" HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                        <Label HorizontalOptions="CenterAndExpand" FontAttributes="Bold" FontSize="22" TextColor="{AppThemeBinding Light={StaticResource PrimaryAccent600Color}, Dark={StaticResource White}}" Visual="Material" Text="{Binding Title}" />
                    </StackLayout>
                </pancakeView:PancakeView>
                <pancakeView:PancakeView Grid.Row="1" Grid.ColumnSpan="2" Margin="4,4" VerticalOptions="Center" CornerRadius="9">
                    <pancakeView:PancakeView.BackgroundGradientStops>
                        <pancakeView:GradientStop Offset="0" Color="{AppThemeBinding Light=AntiqueWhite, Dark={StaticResource DarkElevation16dp}}" />
                        <pancakeView:GradientStop Offset="1" Color="{AppThemeBinding Light=PapayaWhip, Dark={StaticResource DarkElevation24dp}}" />
                    </pancakeView:PancakeView.BackgroundGradientStops>
                    <pancakeView:PancakeView.Shadow>
                        <pancakeView:DropShadow BlurRadius="3" Opacity="0.3" Offset="2,2" Color="#000" />
                    </pancakeView:PancakeView.Shadow>
                    <StackLayout Padding="14,1" HorizontalOptions="FillAndExpand" Orientation="Horizontal">
                        <StackLayout HorizontalOptions="StartAndExpand" Orientation="Horizontal">
                            <Label Style="{DynamicResource LabelStyle}" HorizontalOptions="EndAndExpand" VerticalTextAlignment="Center" TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor}, Dark={StaticResource White}}" Visual="Material" Text="{behaviors:Translate Vakti}" />
                            <Label Style="{DynamicResource LabelStyle}" HorizontalOptions="StartAndExpand" VerticalTextAlignment="Center" FontAttributes="Bold" TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor}, Dark={StaticResource White}}" Visual="Material" Text="{Binding Vakit}" />
                        </StackLayout>
                        <StackLayout HorizontalOptions="EndAndExpand" Orientation="Horizontal">
                            <Switch WidthRequest="48" HeightRequest="48" Margin="{OnPlatform Android=0, iOS='0,19,0,0'}" HorizontalOptions="EndAndExpand" AutomationProperties.HelpText="{behaviors:Translate EtkinlestirSwitchAciklama}" AutomationProperties.IsInAccessibleTree="True" IsToggled="{Binding Etkin}" Visual="Material">
                                <Switch.Behaviors>
                                    <behaviors:EventToCommandBehavior EventName="Toggled" Command="{Binding EnableSwitchToggled}" CommandParameter="{Binding Etkin}" />
                                </Switch.Behaviors>
                            </Switch>
                            <Label Style="{DynamicResource LabelStyle}" Padding="7,0" HorizontalOptions="StartAndExpand" VerticalTextAlignment="Center" TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor}, Dark={StaticResource White}}" Visual="Material" Text="{behaviors:Translate EtkinlestirSwitch}" />
                        </StackLayout>
                    </StackLayout>
                </pancakeView:PancakeView>
                <pancakeView:PancakeView Grid.Row="3" Grid.ColumnSpan="2" IsVisible="{Binding Etkin}" Margin="4,0" CornerRadius="9">
                    <pancakeView:PancakeView.BackgroundGradientStops>
                        <pancakeView:GradientStop Offset="0" Color="{AppThemeBinding Light=Khaki, Dark={StaticResource DarkElevation12dp}}" />
                        <pancakeView:GradientStop Offset="1" Color="{AppThemeBinding Light=#EEE78E, Dark={StaticResource DarkElevation16dp}}" />
                    </pancakeView:PancakeView.BackgroundGradientStops>
                    <pancakeView:PancakeView.Shadow>
                        <pancakeView:DropShadow BlurRadius="3" Opacity="0.3" Color="#000" />
                    </pancakeView:PancakeView.Shadow>
                    <StackLayout Padding="14,1" HorizontalOptions="FillAndExpand" Orientation="Vertical">
                        <StackLayout HorizontalOptions="Fill" VerticalOptions="Center" Orientation="Horizontal">
                            <Switch WidthRequest="48" HeightRequest="48" Margin="{OnPlatform Android=0, iOS='0,19,0,0'}" AutomationProperties.HelpText="{behaviors:Translate BildirimGosterSwitch}" AutomationProperties.IsInAccessibleTree="True" IsEnabled="{Binding Etkin}" IsToggled="{Binding Bildiri}" Visual="Material">
                                <Switch.Behaviors>
                                    <behaviors:EventToCommandBehavior EventName="Toggled" Command="{Binding BildiriCheckedChanged}" CommandParameter="{Binding Bildiri}" />
                                </Switch.Behaviors>
                            </Switch>
                            <Label Style="{DynamicResource LabelStyle}" HorizontalOptions="Start" VerticalTextAlignment="Center" TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor}, Dark={StaticResource White}}" Visual="Material" Text="{behaviors:Translate BildirimGosterSwitch}" />
                        </StackLayout>
                        <StackLayout IsVisible="{Binding IsNecessary}" HorizontalOptions="Fill" Orientation="Horizontal">
                            <Switch WidthRequest="48" HeightRequest="48" Margin="{OnPlatform Android=0, iOS='0,19,0,0'}" VerticalOptions="Center" AutomationProperties.HelpText="{behaviors:Translate TitresimSwitch}" AutomationProperties.IsInAccessibleTree="True" IsEnabled="{Binding Etkin}" IsToggled="{Binding Titreme}" Visual="Material">
                                <Switch.Behaviors>
                                    <behaviors:EventToCommandBehavior EventName="Toggled" Command="{Binding TitremeCheckedChanged}" CommandParameter="{Binding Titreme}" />
                                </Switch.Behaviors>
                            </Switch>
                            <Label Style="{DynamicResource LabelStyle}" HorizontalOptions="Start" VerticalTextAlignment="Center" TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor}, Dark={StaticResource White}}" Visual="Material" Text="{behaviors:Translate TitresimSwitch}" />
                        </StackLayout>
                        <StackLayout IsVisible="{Binding IsNecessary}" HorizontalOptions="Fill" Orientation="Horizontal">
                            <Switch WidthRequest="48" HeightRequest="48" VerticalOptions="Center" AutomationProperties.HelpText="{behaviors:Translate AlarmSwitch}" AutomationProperties.IsInAccessibleTree="True" IsEnabled="{Binding Etkin}" IsToggled="{Binding Alarm}" Visual="Material">
                                <!--  Color="Maroon"  -->
                                <Switch.Behaviors>
                                    <behaviors:EventToCommandBehavior EventName="Toggled" Command="{Binding AlarmCheckedChanged}" CommandParameter="{Binding Alarm}" />
                                </Switch.Behaviors>
                            </Switch>
                            <Label Style="{DynamicResource LabelStyle}" HorizontalOptions="Start" VerticalTextAlignment="Center" TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor}, Dark={StaticResource White}}" Visual="Material" Text="{behaviors:Translate AlarmSwitch}" />
                        </StackLayout>
                    </StackLayout>
                </pancakeView:PancakeView>
                <pancakeView:PancakeView Grid.Row="6" Grid.ColumnSpan="2" IsVisible="{Binding Etkin}" Margin="4,0" Padding="5" CornerRadius="9">
                    <pancakeView:PancakeView.BackgroundGradientStops>
                        <pancakeView:GradientStop Offset="0" Color="{AppThemeBinding Light=#FCE4AE, Dark={StaticResource DarkElevation16dp}}" />
                        <!--<pancakeView:GradientStop Color="PapayaWhip" Offset="0.75"/>-->
                        <pancakeView:GradientStop Offset="1" Color="{AppThemeBinding Light=#F8E9BE, Dark={StaticResource DarkElevation12dp}}" />
                    </pancakeView:PancakeView.BackgroundGradientStops>
                    <pancakeView:PancakeView.Shadow>
                        <pancakeView:DropShadow BlurRadius="3" Opacity="0.3" Offset="1,1" Color="#000" />
                    </pancakeView:PancakeView.Shadow>
                    <StackLayout Padding="14,5" HorizontalOptions="FillAndExpand">
                        <!--  RadioButtonGroup.GroupName="zaman"  -->
                        <Label x:Name="LabelAlarmStartTime" Style="{DynamicResource LabelStyle}" HorizontalOptions="Start" HorizontalTextAlignment="End" TextColor="{AppThemeBinding Light={StaticResource PrimaryAccent800Color}, Dark={StaticResource PrimaryAccent100Color}}" Visual="Material">
                            <Label.FormattedText>
                                <FormattedString>
                                    <Span Text="{behaviors:Translate BildirmeZamani}" />
                                    <Span Text="{Binding BildirmeVakti}" />
                                    <Span Text="{behaviors:Translate DakikaOnceden}" />
                                </FormattedString>
                            </Label.FormattedText>
                        </Label>
                        <Slider HeightRequest="48" HorizontalOptions="FillAndExpand" AutomationProperties.IsInAccessibleTree="true" AutomationProperties.LabeledBy="LabelAlarmStartTime" Maximum="60" Minimum="0" Visual="Material" Value="{Binding BildirmeVakti}" />
                        <!--<Label HorizontalOptions="Start" Text="{behaviors:Translate BildirmeZamani}" Style="{DynamicResource LabelStyle}" HorizontalTextAlignment="End" TextColor="{AppThemeBinding Light={StaticResource PrimaryAccent800Color}, Dark={StaticResource PrimaryAccent100Color}}" Visual="Material"/>
                        <RadioButton Content="{behaviors:Translate Zamaninda}" Value="0" x:Name="Zamaninda" Style="{StaticResource RadioButtonStyle}" AutomationProperties.IsInAccessibleTree="True" AutomationProperties.HelpText="{behaviors:Translate Zamaninda}" Visual="Material">
                            <RadioButton.Triggers>
                                <DataTrigger TargetType="RadioButton" Binding="{Binding BildirmeVakti}" Value="0">
                                    <Setter TargetName="Zamaninda" Property="IsChecked" Value="True"/>
                                </DataTrigger>
                            </RadioButton.Triggers>
                            <RadioButton.Behaviors>
                                <behaviors:EventToCommandBehavior EventName="CheckedChanged" Command="{Binding RadioButtonCheckedChanged}" CommandParameter="{x:Reference Zamaninda}"/>
                            </RadioButton.Behaviors>
                        </RadioButton>
                        <RadioButton Content="{behaviors:Translate BesDakikaOnceden}" Value="5" x:Name="Bes" Style="{StaticResource RadioButtonStyle}" AutomationProperties.IsInAccessibleTree="True" AutomationProperties.HelpText="{behaviors:Translate BesDakikaOnceden}" Visual="Material">
                            <RadioButton.Triggers>
                                <DataTrigger TargetType="RadioButton" Binding="{Binding BildirmeVakti}" Value="5">
                                    <Setter TargetName="Bes" Property="IsChecked" Value="True"/>
                                </DataTrigger>
                            </RadioButton.Triggers>
                            <RadioButton.Behaviors>
                                <behaviors:EventToCommandBehavior EventName="CheckedChanged" Command="{Binding RadioButtonCheckedChanged}" CommandParameter="{x:Reference Bes}"/>
                            </RadioButton.Behaviors>
                        </RadioButton>
                        <RadioButton Content="{behaviors:Translate OnBesDakikaOnceden}" Value="15" x:Name="Onbes" Style="{StaticResource RadioButtonStyle}" AutomationProperties.IsInAccessibleTree="True" AutomationProperties.HelpText="{behaviors:Translate OnBesDakikaOnceden}" Visual="Material">
                            <RadioButton.Triggers>
                                <DataTrigger TargetType="RadioButton" Binding="{Binding BildirmeVakti}" Value="15">
                                    <Setter TargetName="Onbes" Property="IsChecked" Value="True"/>
                                </DataTrigger>
                            </RadioButton.Triggers>
                            <RadioButton.Behaviors>
                                <behaviors:EventToCommandBehavior EventName="CheckedChanged" Command="{Binding RadioButtonCheckedChanged}" CommandParameter="{x:Reference Onbes}"/>
                            </RadioButton.Behaviors>
                        </RadioButton>-->
                        <Label Style="{DynamicResource LabelStyle}" HorizontalOptions="Start" HorizontalTextAlignment="End" TextColor="{AppThemeBinding Light={StaticResource PrimaryAccent800Color}, Dark={StaticResource PrimaryAccent100Color}}" Visual="Material" Text="{behaviors:Translate AlarmSound}" />
                        <StackLayout Orientation="Horizontal">
                            <Picker Title="{behaviors:Translate Birsessecin}"
                                    Style="{DynamicResource PickerStyle}"
                                    HeightRequest="48" HorizontalOptions="FillAndExpand"
                                    BackgroundColor="{AppThemeBinding Light={StaticResource AppBackgroundColor},
                                                                      Dark={StaticResource DarkElevation2dp}}"
                                    AutomationProperties.HelpText="{behaviors:Translate SesSecAciklama}"
                                    AutomationProperties.IsInAccessibleTree="true"
                                    ItemDisplayBinding="{Binding Name}"
                                    SelectedItem="{Binding SelectedSound}"
                                    TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor},
                                                                Dark={StaticResource White}}"
                                    ItemsSource="{Binding AvailableSounds}" />
                            <!--<Button Text="{Binding TestButtonText}" Command="{Binding TestButtonCommand}" CornerRadius="9" BackgroundColor="{StaticResource PrimaryLightAccent100Color}" HorizontalOptions="End" FontFamily="MaterialIcons" FontAttributes="Bold" Font="Default"/>-->
                            <Label Padding="0" HorizontalOptions="CenterAndExpand" VerticalOptions="CenterAndExpand"
                                   AutomationProperties.HelpText="{behaviors:Translate AlarmSwitch}"
                                   AutomationProperties.IsInAccessibleTree="True" FontAttributes="Bold" FontFamily="MaterialIcons" FontSize="45" Opacity="0.8"
                                   TextColor="{AppThemeBinding Light={StaticResource OnPrimaryColor},
                                                               Dark={StaticResource White}}"
                                   Visual="Material"
                                   Text="{Binding TestButtonText}">
                                <Label.Triggers>
                                    <DataTrigger Binding="{Binding IsPlaying}" TargetType="Label" Value="False">
                                        <Setter Property="Text" Value="&#xe038;" />
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsPlaying}" TargetType="Label" Value="True">
                                        <Setter Property="Text" Value="&#xe047;" />
                                    </DataTrigger>
                                </Label.Triggers>
                                <Label.GestureRecognizers>
                                    <TapGestureRecognizer NumberOfTapsRequired="1" Command="{Binding TestButtonCommand}" />
                                </Label.GestureRecognizers>
                            </Label>
                        </StackLayout>
                        <!--<StackLayout Orientation="Vertical" IsVisible="{Binding IsNecessary}">
                            <Label HorizontalOptions="Start" Style="{DynamicResource LabelStyle}"
                                   HorizontalTextAlignment="End"
                                   TextColor="{AppThemeBinding Light={StaticResource PrimaryAccent800Color}, Dark={StaticResource PrimaryAccent100Color}}"
                                   Visual="Material" x:Name="LabelAlarmRepeats">
                                <Label.FormattedText>
                                    <FormattedString>
                                        <Span Text="{behaviors:Translate AlarmTekrarlari}" />
                                        <Span Text="{Binding AlarmRepeats}" />
                                        <Span Text="{behaviors:Translate Kere}" />
                                    </FormattedString>
                                </Label.FormattedText>
                            </Label>
                        <Slider HorizontalOptions="FillAndExpand" HeightRequest="48" Maximum="30" Minimum="1" Value="{Binding AlarmRepeats}" Visual="Material" AutomationProperties.IsInAccessibleTree="true" AutomationProperties.LabeledBy="LabelAlarmRepeats" />
                        </StackLayout>-->
                    </StackLayout>
                </pancakeView:PancakeView>

                <StackLayout Grid.Row="7" Grid.ColumnSpan="2" Margin="7" Padding="0" HorizontalOptions="Fill" Orientation="Horizontal">
                    <Button Style="{DynamicResource ButtonStyle}" Padding="7" HorizontalOptions="FillAndExpand" BackgroundColor="{AppThemeBinding Light={StaticResource PrimaryAccent400Color}, Dark={StaticResource SecondaryColor}}" Visual="Material" Command="{Binding BackCommand}" Text="{behaviors:Translate Kapat}" />
                </StackLayout>
                <!--</pancakeView:PancakeView>-->
            </Grid>
        </pancakeView:PancakeView>
    </ScrollView>
</ContentPage>